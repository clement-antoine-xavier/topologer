
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TracerouteHop` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TracerouteHop
 * 
 */
export type TracerouteHopModel = runtime.Types.Result.DefaultSelection<Prisma.$TracerouteHopPayload>

export type AggregateTracerouteHop = {
  _count: TracerouteHopCountAggregateOutputType | null
  _avg: TracerouteHopAvgAggregateOutputType | null
  _sum: TracerouteHopSumAggregateOutputType | null
  _min: TracerouteHopMinAggregateOutputType | null
  _max: TracerouteHopMaxAggregateOutputType | null
}

export type TracerouteHopAvgAggregateOutputType = {
  hopNumber: number | null
  rtt1: number | null
  rtt2: number | null
  rtt3: number | null
}

export type TracerouteHopSumAggregateOutputType = {
  hopNumber: number | null
  rtt1: number | null
  rtt2: number | null
  rtt3: number | null
}

export type TracerouteHopMinAggregateOutputType = {
  id: string | null
  resultId: string | null
  hopNumber: number | null
  ip: string | null
  hostname: string | null
  rtt1: number | null
  rtt2: number | null
  rtt3: number | null
}

export type TracerouteHopMaxAggregateOutputType = {
  id: string | null
  resultId: string | null
  hopNumber: number | null
  ip: string | null
  hostname: string | null
  rtt1: number | null
  rtt2: number | null
  rtt3: number | null
}

export type TracerouteHopCountAggregateOutputType = {
  id: number
  resultId: number
  hopNumber: number
  ip: number
  hostname: number
  rtt1: number
  rtt2: number
  rtt3: number
  _all: number
}


export type TracerouteHopAvgAggregateInputType = {
  hopNumber?: true
  rtt1?: true
  rtt2?: true
  rtt3?: true
}

export type TracerouteHopSumAggregateInputType = {
  hopNumber?: true
  rtt1?: true
  rtt2?: true
  rtt3?: true
}

export type TracerouteHopMinAggregateInputType = {
  id?: true
  resultId?: true
  hopNumber?: true
  ip?: true
  hostname?: true
  rtt1?: true
  rtt2?: true
  rtt3?: true
}

export type TracerouteHopMaxAggregateInputType = {
  id?: true
  resultId?: true
  hopNumber?: true
  ip?: true
  hostname?: true
  rtt1?: true
  rtt2?: true
  rtt3?: true
}

export type TracerouteHopCountAggregateInputType = {
  id?: true
  resultId?: true
  hopNumber?: true
  ip?: true
  hostname?: true
  rtt1?: true
  rtt2?: true
  rtt3?: true
  _all?: true
}

export type TracerouteHopAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TracerouteHop to aggregate.
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteHops to fetch.
   */
  orderBy?: Prisma.TracerouteHopOrderByWithRelationInput | Prisma.TracerouteHopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TracerouteHopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteHops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteHops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TracerouteHops
  **/
  _count?: true | TracerouteHopCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TracerouteHopAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TracerouteHopSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TracerouteHopMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TracerouteHopMaxAggregateInputType
}

export type GetTracerouteHopAggregateType<T extends TracerouteHopAggregateArgs> = {
      [P in keyof T & keyof AggregateTracerouteHop]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTracerouteHop[P]>
    : Prisma.GetScalarType<T[P], AggregateTracerouteHop[P]>
}




export type TracerouteHopGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TracerouteHopWhereInput
  orderBy?: Prisma.TracerouteHopOrderByWithAggregationInput | Prisma.TracerouteHopOrderByWithAggregationInput[]
  by: Prisma.TracerouteHopScalarFieldEnum[] | Prisma.TracerouteHopScalarFieldEnum
  having?: Prisma.TracerouteHopScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TracerouteHopCountAggregateInputType | true
  _avg?: TracerouteHopAvgAggregateInputType
  _sum?: TracerouteHopSumAggregateInputType
  _min?: TracerouteHopMinAggregateInputType
  _max?: TracerouteHopMaxAggregateInputType
}

export type TracerouteHopGroupByOutputType = {
  id: string
  resultId: string
  hopNumber: number
  ip: string | null
  hostname: string | null
  rtt1: number | null
  rtt2: number | null
  rtt3: number | null
  _count: TracerouteHopCountAggregateOutputType | null
  _avg: TracerouteHopAvgAggregateOutputType | null
  _sum: TracerouteHopSumAggregateOutputType | null
  _min: TracerouteHopMinAggregateOutputType | null
  _max: TracerouteHopMaxAggregateOutputType | null
}

type GetTracerouteHopGroupByPayload<T extends TracerouteHopGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TracerouteHopGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TracerouteHopGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TracerouteHopGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TracerouteHopGroupByOutputType[P]>
      }
    >
  >



export type TracerouteHopWhereInput = {
  AND?: Prisma.TracerouteHopWhereInput | Prisma.TracerouteHopWhereInput[]
  OR?: Prisma.TracerouteHopWhereInput[]
  NOT?: Prisma.TracerouteHopWhereInput | Prisma.TracerouteHopWhereInput[]
  id?: Prisma.StringFilter<"TracerouteHop"> | string
  resultId?: Prisma.StringFilter<"TracerouteHop"> | string
  hopNumber?: Prisma.IntFilter<"TracerouteHop"> | number
  ip?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  hostname?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  rtt1?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt2?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt3?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  result?: Prisma.XOR<Prisma.TracerouteResultScalarRelationFilter, Prisma.TracerouteResultWhereInput>
}

export type TracerouteHopOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  resultId?: Prisma.SortOrder
  hopNumber?: Prisma.SortOrder
  ip?: Prisma.SortOrderInput | Prisma.SortOrder
  hostname?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt1?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt2?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt3?: Prisma.SortOrderInput | Prisma.SortOrder
  result?: Prisma.TracerouteResultOrderByWithRelationInput
}

export type TracerouteHopWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TracerouteHopWhereInput | Prisma.TracerouteHopWhereInput[]
  OR?: Prisma.TracerouteHopWhereInput[]
  NOT?: Prisma.TracerouteHopWhereInput | Prisma.TracerouteHopWhereInput[]
  resultId?: Prisma.StringFilter<"TracerouteHop"> | string
  hopNumber?: Prisma.IntFilter<"TracerouteHop"> | number
  ip?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  hostname?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  rtt1?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt2?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt3?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  result?: Prisma.XOR<Prisma.TracerouteResultScalarRelationFilter, Prisma.TracerouteResultWhereInput>
}, "id">

export type TracerouteHopOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  resultId?: Prisma.SortOrder
  hopNumber?: Prisma.SortOrder
  ip?: Prisma.SortOrderInput | Prisma.SortOrder
  hostname?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt1?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt2?: Prisma.SortOrderInput | Prisma.SortOrder
  rtt3?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TracerouteHopCountOrderByAggregateInput
  _avg?: Prisma.TracerouteHopAvgOrderByAggregateInput
  _max?: Prisma.TracerouteHopMaxOrderByAggregateInput
  _min?: Prisma.TracerouteHopMinOrderByAggregateInput
  _sum?: Prisma.TracerouteHopSumOrderByAggregateInput
}

export type TracerouteHopScalarWhereWithAggregatesInput = {
  AND?: Prisma.TracerouteHopScalarWhereWithAggregatesInput | Prisma.TracerouteHopScalarWhereWithAggregatesInput[]
  OR?: Prisma.TracerouteHopScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TracerouteHopScalarWhereWithAggregatesInput | Prisma.TracerouteHopScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TracerouteHop"> | string
  resultId?: Prisma.StringWithAggregatesFilter<"TracerouteHop"> | string
  hopNumber?: Prisma.IntWithAggregatesFilter<"TracerouteHop"> | number
  ip?: Prisma.StringNullableWithAggregatesFilter<"TracerouteHop"> | string | null
  hostname?: Prisma.StringNullableWithAggregatesFilter<"TracerouteHop"> | string | null
  rtt1?: Prisma.FloatNullableWithAggregatesFilter<"TracerouteHop"> | number | null
  rtt2?: Prisma.FloatNullableWithAggregatesFilter<"TracerouteHop"> | number | null
  rtt3?: Prisma.FloatNullableWithAggregatesFilter<"TracerouteHop"> | number | null
}

export type TracerouteHopCreateInput = {
  id?: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
  result: Prisma.TracerouteResultCreateNestedOneWithoutHopsInput
}

export type TracerouteHopUncheckedCreateInput = {
  id?: string
  resultId: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
}

export type TracerouteHopUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  result?: Prisma.TracerouteResultUpdateOneRequiredWithoutHopsNestedInput
}

export type TracerouteHopUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  resultId?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type TracerouteHopCreateManyInput = {
  id?: string
  resultId: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
}

export type TracerouteHopUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type TracerouteHopUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  resultId?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type TracerouteHopListRelationFilter = {
  every?: Prisma.TracerouteHopWhereInput
  some?: Prisma.TracerouteHopWhereInput
  none?: Prisma.TracerouteHopWhereInput
}

export type TracerouteHopOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TracerouteHopCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  resultId?: Prisma.SortOrder
  hopNumber?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  hostname?: Prisma.SortOrder
  rtt1?: Prisma.SortOrder
  rtt2?: Prisma.SortOrder
  rtt3?: Prisma.SortOrder
}

export type TracerouteHopAvgOrderByAggregateInput = {
  hopNumber?: Prisma.SortOrder
  rtt1?: Prisma.SortOrder
  rtt2?: Prisma.SortOrder
  rtt3?: Prisma.SortOrder
}

export type TracerouteHopMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  resultId?: Prisma.SortOrder
  hopNumber?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  hostname?: Prisma.SortOrder
  rtt1?: Prisma.SortOrder
  rtt2?: Prisma.SortOrder
  rtt3?: Prisma.SortOrder
}

export type TracerouteHopMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  resultId?: Prisma.SortOrder
  hopNumber?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  hostname?: Prisma.SortOrder
  rtt1?: Prisma.SortOrder
  rtt2?: Prisma.SortOrder
  rtt3?: Prisma.SortOrder
}

export type TracerouteHopSumOrderByAggregateInput = {
  hopNumber?: Prisma.SortOrder
  rtt1?: Prisma.SortOrder
  rtt2?: Prisma.SortOrder
  rtt3?: Prisma.SortOrder
}

export type TracerouteHopCreateNestedManyWithoutResultInput = {
  create?: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput> | Prisma.TracerouteHopCreateWithoutResultInput[] | Prisma.TracerouteHopUncheckedCreateWithoutResultInput[]
  connectOrCreate?: Prisma.TracerouteHopCreateOrConnectWithoutResultInput | Prisma.TracerouteHopCreateOrConnectWithoutResultInput[]
  createMany?: Prisma.TracerouteHopCreateManyResultInputEnvelope
  connect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
}

export type TracerouteHopUncheckedCreateNestedManyWithoutResultInput = {
  create?: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput> | Prisma.TracerouteHopCreateWithoutResultInput[] | Prisma.TracerouteHopUncheckedCreateWithoutResultInput[]
  connectOrCreate?: Prisma.TracerouteHopCreateOrConnectWithoutResultInput | Prisma.TracerouteHopCreateOrConnectWithoutResultInput[]
  createMany?: Prisma.TracerouteHopCreateManyResultInputEnvelope
  connect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
}

export type TracerouteHopUpdateManyWithoutResultNestedInput = {
  create?: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput> | Prisma.TracerouteHopCreateWithoutResultInput[] | Prisma.TracerouteHopUncheckedCreateWithoutResultInput[]
  connectOrCreate?: Prisma.TracerouteHopCreateOrConnectWithoutResultInput | Prisma.TracerouteHopCreateOrConnectWithoutResultInput[]
  upsert?: Prisma.TracerouteHopUpsertWithWhereUniqueWithoutResultInput | Prisma.TracerouteHopUpsertWithWhereUniqueWithoutResultInput[]
  createMany?: Prisma.TracerouteHopCreateManyResultInputEnvelope
  set?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  disconnect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  delete?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  connect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  update?: Prisma.TracerouteHopUpdateWithWhereUniqueWithoutResultInput | Prisma.TracerouteHopUpdateWithWhereUniqueWithoutResultInput[]
  updateMany?: Prisma.TracerouteHopUpdateManyWithWhereWithoutResultInput | Prisma.TracerouteHopUpdateManyWithWhereWithoutResultInput[]
  deleteMany?: Prisma.TracerouteHopScalarWhereInput | Prisma.TracerouteHopScalarWhereInput[]
}

export type TracerouteHopUncheckedUpdateManyWithoutResultNestedInput = {
  create?: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput> | Prisma.TracerouteHopCreateWithoutResultInput[] | Prisma.TracerouteHopUncheckedCreateWithoutResultInput[]
  connectOrCreate?: Prisma.TracerouteHopCreateOrConnectWithoutResultInput | Prisma.TracerouteHopCreateOrConnectWithoutResultInput[]
  upsert?: Prisma.TracerouteHopUpsertWithWhereUniqueWithoutResultInput | Prisma.TracerouteHopUpsertWithWhereUniqueWithoutResultInput[]
  createMany?: Prisma.TracerouteHopCreateManyResultInputEnvelope
  set?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  disconnect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  delete?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  connect?: Prisma.TracerouteHopWhereUniqueInput | Prisma.TracerouteHopWhereUniqueInput[]
  update?: Prisma.TracerouteHopUpdateWithWhereUniqueWithoutResultInput | Prisma.TracerouteHopUpdateWithWhereUniqueWithoutResultInput[]
  updateMany?: Prisma.TracerouteHopUpdateManyWithWhereWithoutResultInput | Prisma.TracerouteHopUpdateManyWithWhereWithoutResultInput[]
  deleteMany?: Prisma.TracerouteHopScalarWhereInput | Prisma.TracerouteHopScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TracerouteHopCreateWithoutResultInput = {
  id?: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
}

export type TracerouteHopUncheckedCreateWithoutResultInput = {
  id?: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
}

export type TracerouteHopCreateOrConnectWithoutResultInput = {
  where: Prisma.TracerouteHopWhereUniqueInput
  create: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput>
}

export type TracerouteHopCreateManyResultInputEnvelope = {
  data: Prisma.TracerouteHopCreateManyResultInput | Prisma.TracerouteHopCreateManyResultInput[]
}

export type TracerouteHopUpsertWithWhereUniqueWithoutResultInput = {
  where: Prisma.TracerouteHopWhereUniqueInput
  update: Prisma.XOR<Prisma.TracerouteHopUpdateWithoutResultInput, Prisma.TracerouteHopUncheckedUpdateWithoutResultInput>
  create: Prisma.XOR<Prisma.TracerouteHopCreateWithoutResultInput, Prisma.TracerouteHopUncheckedCreateWithoutResultInput>
}

export type TracerouteHopUpdateWithWhereUniqueWithoutResultInput = {
  where: Prisma.TracerouteHopWhereUniqueInput
  data: Prisma.XOR<Prisma.TracerouteHopUpdateWithoutResultInput, Prisma.TracerouteHopUncheckedUpdateWithoutResultInput>
}

export type TracerouteHopUpdateManyWithWhereWithoutResultInput = {
  where: Prisma.TracerouteHopScalarWhereInput
  data: Prisma.XOR<Prisma.TracerouteHopUpdateManyMutationInput, Prisma.TracerouteHopUncheckedUpdateManyWithoutResultInput>
}

export type TracerouteHopScalarWhereInput = {
  AND?: Prisma.TracerouteHopScalarWhereInput | Prisma.TracerouteHopScalarWhereInput[]
  OR?: Prisma.TracerouteHopScalarWhereInput[]
  NOT?: Prisma.TracerouteHopScalarWhereInput | Prisma.TracerouteHopScalarWhereInput[]
  id?: Prisma.StringFilter<"TracerouteHop"> | string
  resultId?: Prisma.StringFilter<"TracerouteHop"> | string
  hopNumber?: Prisma.IntFilter<"TracerouteHop"> | number
  ip?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  hostname?: Prisma.StringNullableFilter<"TracerouteHop"> | string | null
  rtt1?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt2?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
  rtt3?: Prisma.FloatNullableFilter<"TracerouteHop"> | number | null
}

export type TracerouteHopCreateManyResultInput = {
  id?: string
  hopNumber: number
  ip?: string | null
  hostname?: string | null
  rtt1?: number | null
  rtt2?: number | null
  rtt3?: number | null
}

export type TracerouteHopUpdateWithoutResultInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type TracerouteHopUncheckedUpdateWithoutResultInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type TracerouteHopUncheckedUpdateManyWithoutResultInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  hopNumber?: Prisma.IntFieldUpdateOperationsInput | number
  ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  hostname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rtt1?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt2?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rtt3?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}



export type TracerouteHopSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  resultId?: boolean
  hopNumber?: boolean
  ip?: boolean
  hostname?: boolean
  rtt1?: boolean
  rtt2?: boolean
  rtt3?: boolean
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tracerouteHop"]>

export type TracerouteHopSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  resultId?: boolean
  hopNumber?: boolean
  ip?: boolean
  hostname?: boolean
  rtt1?: boolean
  rtt2?: boolean
  rtt3?: boolean
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tracerouteHop"]>

export type TracerouteHopSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  resultId?: boolean
  hopNumber?: boolean
  ip?: boolean
  hostname?: boolean
  rtt1?: boolean
  rtt2?: boolean
  rtt3?: boolean
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tracerouteHop"]>

export type TracerouteHopSelectScalar = {
  id?: boolean
  resultId?: boolean
  hopNumber?: boolean
  ip?: boolean
  hostname?: boolean
  rtt1?: boolean
  rtt2?: boolean
  rtt3?: boolean
}

export type TracerouteHopOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "resultId" | "hopNumber" | "ip" | "hostname" | "rtt1" | "rtt2" | "rtt3", ExtArgs["result"]["tracerouteHop"]>
export type TracerouteHopInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}
export type TracerouteHopIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}
export type TracerouteHopIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  result?: boolean | Prisma.TracerouteResultDefaultArgs<ExtArgs>
}

export type $TracerouteHopPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TracerouteHop"
  objects: {
    result: Prisma.$TracerouteResultPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    resultId: string
    hopNumber: number
    ip: string | null
    hostname: string | null
    rtt1: number | null
    rtt2: number | null
    rtt3: number | null
  }, ExtArgs["result"]["tracerouteHop"]>
  composites: {}
}

export type TracerouteHopGetPayload<S extends boolean | null | undefined | TracerouteHopDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload, S>

export type TracerouteHopCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TracerouteHopFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TracerouteHopCountAggregateInputType | true
  }

export interface TracerouteHopDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TracerouteHop'], meta: { name: 'TracerouteHop' } }
  /**
   * Find zero or one TracerouteHop that matches the filter.
   * @param {TracerouteHopFindUniqueArgs} args - Arguments to find a TracerouteHop
   * @example
   * // Get one TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TracerouteHopFindUniqueArgs>(args: Prisma.SelectSubset<T, TracerouteHopFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TracerouteHop that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TracerouteHopFindUniqueOrThrowArgs} args - Arguments to find a TracerouteHop
   * @example
   * // Get one TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TracerouteHopFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TracerouteHopFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TracerouteHop that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopFindFirstArgs} args - Arguments to find a TracerouteHop
   * @example
   * // Get one TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TracerouteHopFindFirstArgs>(args?: Prisma.SelectSubset<T, TracerouteHopFindFirstArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TracerouteHop that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopFindFirstOrThrowArgs} args - Arguments to find a TracerouteHop
   * @example
   * // Get one TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TracerouteHopFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TracerouteHopFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TracerouteHops that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TracerouteHops
   * const tracerouteHops = await prisma.tracerouteHop.findMany()
   * 
   * // Get first 10 TracerouteHops
   * const tracerouteHops = await prisma.tracerouteHop.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tracerouteHopWithIdOnly = await prisma.tracerouteHop.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TracerouteHopFindManyArgs>(args?: Prisma.SelectSubset<T, TracerouteHopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TracerouteHop.
   * @param {TracerouteHopCreateArgs} args - Arguments to create a TracerouteHop.
   * @example
   * // Create one TracerouteHop
   * const TracerouteHop = await prisma.tracerouteHop.create({
   *   data: {
   *     // ... data to create a TracerouteHop
   *   }
   * })
   * 
   */
  create<T extends TracerouteHopCreateArgs>(args: Prisma.SelectSubset<T, TracerouteHopCreateArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TracerouteHops.
   * @param {TracerouteHopCreateManyArgs} args - Arguments to create many TracerouteHops.
   * @example
   * // Create many TracerouteHops
   * const tracerouteHop = await prisma.tracerouteHop.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TracerouteHopCreateManyArgs>(args?: Prisma.SelectSubset<T, TracerouteHopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TracerouteHops and returns the data saved in the database.
   * @param {TracerouteHopCreateManyAndReturnArgs} args - Arguments to create many TracerouteHops.
   * @example
   * // Create many TracerouteHops
   * const tracerouteHop = await prisma.tracerouteHop.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TracerouteHops and only return the `id`
   * const tracerouteHopWithIdOnly = await prisma.tracerouteHop.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TracerouteHopCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TracerouteHopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TracerouteHop.
   * @param {TracerouteHopDeleteArgs} args - Arguments to delete one TracerouteHop.
   * @example
   * // Delete one TracerouteHop
   * const TracerouteHop = await prisma.tracerouteHop.delete({
   *   where: {
   *     // ... filter to delete one TracerouteHop
   *   }
   * })
   * 
   */
  delete<T extends TracerouteHopDeleteArgs>(args: Prisma.SelectSubset<T, TracerouteHopDeleteArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TracerouteHop.
   * @param {TracerouteHopUpdateArgs} args - Arguments to update one TracerouteHop.
   * @example
   * // Update one TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TracerouteHopUpdateArgs>(args: Prisma.SelectSubset<T, TracerouteHopUpdateArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TracerouteHops.
   * @param {TracerouteHopDeleteManyArgs} args - Arguments to filter TracerouteHops to delete.
   * @example
   * // Delete a few TracerouteHops
   * const { count } = await prisma.tracerouteHop.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TracerouteHopDeleteManyArgs>(args?: Prisma.SelectSubset<T, TracerouteHopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TracerouteHops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TracerouteHops
   * const tracerouteHop = await prisma.tracerouteHop.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TracerouteHopUpdateManyArgs>(args: Prisma.SelectSubset<T, TracerouteHopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TracerouteHops and returns the data updated in the database.
   * @param {TracerouteHopUpdateManyAndReturnArgs} args - Arguments to update many TracerouteHops.
   * @example
   * // Update many TracerouteHops
   * const tracerouteHop = await prisma.tracerouteHop.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TracerouteHops and only return the `id`
   * const tracerouteHopWithIdOnly = await prisma.tracerouteHop.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TracerouteHopUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TracerouteHopUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TracerouteHop.
   * @param {TracerouteHopUpsertArgs} args - Arguments to update or create a TracerouteHop.
   * @example
   * // Update or create a TracerouteHop
   * const tracerouteHop = await prisma.tracerouteHop.upsert({
   *   create: {
   *     // ... data to create a TracerouteHop
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TracerouteHop we want to update
   *   }
   * })
   */
  upsert<T extends TracerouteHopUpsertArgs>(args: Prisma.SelectSubset<T, TracerouteHopUpsertArgs<ExtArgs>>): Prisma.Prisma__TracerouteHopClient<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TracerouteHops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopCountArgs} args - Arguments to filter TracerouteHops to count.
   * @example
   * // Count the number of TracerouteHops
   * const count = await prisma.tracerouteHop.count({
   *   where: {
   *     // ... the filter for the TracerouteHops we want to count
   *   }
   * })
  **/
  count<T extends TracerouteHopCountArgs>(
    args?: Prisma.Subset<T, TracerouteHopCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TracerouteHopCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TracerouteHop.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TracerouteHopAggregateArgs>(args: Prisma.Subset<T, TracerouteHopAggregateArgs>): Prisma.PrismaPromise<GetTracerouteHopAggregateType<T>>

  /**
   * Group by TracerouteHop.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteHopGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TracerouteHopGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TracerouteHopGroupByArgs['orderBy'] }
      : { orderBy?: TracerouteHopGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TracerouteHopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTracerouteHopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TracerouteHop model
 */
readonly fields: TracerouteHopFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TracerouteHop.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TracerouteHopClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  result<T extends Prisma.TracerouteResultDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TracerouteResultDefaultArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TracerouteHop model
 */
export interface TracerouteHopFieldRefs {
  readonly id: Prisma.FieldRef<"TracerouteHop", 'String'>
  readonly resultId: Prisma.FieldRef<"TracerouteHop", 'String'>
  readonly hopNumber: Prisma.FieldRef<"TracerouteHop", 'Int'>
  readonly ip: Prisma.FieldRef<"TracerouteHop", 'String'>
  readonly hostname: Prisma.FieldRef<"TracerouteHop", 'String'>
  readonly rtt1: Prisma.FieldRef<"TracerouteHop", 'Float'>
  readonly rtt2: Prisma.FieldRef<"TracerouteHop", 'Float'>
  readonly rtt3: Prisma.FieldRef<"TracerouteHop", 'Float'>
}
    

// Custom InputTypes
/**
 * TracerouteHop findUnique
 */
export type TracerouteHopFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteHop to fetch.
   */
  where: Prisma.TracerouteHopWhereUniqueInput
}

/**
 * TracerouteHop findUniqueOrThrow
 */
export type TracerouteHopFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteHop to fetch.
   */
  where: Prisma.TracerouteHopWhereUniqueInput
}

/**
 * TracerouteHop findFirst
 */
export type TracerouteHopFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteHop to fetch.
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteHops to fetch.
   */
  orderBy?: Prisma.TracerouteHopOrderByWithRelationInput | Prisma.TracerouteHopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TracerouteHops.
   */
  cursor?: Prisma.TracerouteHopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteHops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteHops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TracerouteHops.
   */
  distinct?: Prisma.TracerouteHopScalarFieldEnum | Prisma.TracerouteHopScalarFieldEnum[]
}

/**
 * TracerouteHop findFirstOrThrow
 */
export type TracerouteHopFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteHop to fetch.
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteHops to fetch.
   */
  orderBy?: Prisma.TracerouteHopOrderByWithRelationInput | Prisma.TracerouteHopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TracerouteHops.
   */
  cursor?: Prisma.TracerouteHopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteHops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteHops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TracerouteHops.
   */
  distinct?: Prisma.TracerouteHopScalarFieldEnum | Prisma.TracerouteHopScalarFieldEnum[]
}

/**
 * TracerouteHop findMany
 */
export type TracerouteHopFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteHops to fetch.
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteHops to fetch.
   */
  orderBy?: Prisma.TracerouteHopOrderByWithRelationInput | Prisma.TracerouteHopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TracerouteHops.
   */
  cursor?: Prisma.TracerouteHopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteHops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteHops.
   */
  skip?: number
  distinct?: Prisma.TracerouteHopScalarFieldEnum | Prisma.TracerouteHopScalarFieldEnum[]
}

/**
 * TracerouteHop create
 */
export type TracerouteHopCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * The data needed to create a TracerouteHop.
   */
  data: Prisma.XOR<Prisma.TracerouteHopCreateInput, Prisma.TracerouteHopUncheckedCreateInput>
}

/**
 * TracerouteHop createMany
 */
export type TracerouteHopCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TracerouteHops.
   */
  data: Prisma.TracerouteHopCreateManyInput | Prisma.TracerouteHopCreateManyInput[]
}

/**
 * TracerouteHop createManyAndReturn
 */
export type TracerouteHopCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * The data used to create many TracerouteHops.
   */
  data: Prisma.TracerouteHopCreateManyInput | Prisma.TracerouteHopCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TracerouteHop update
 */
export type TracerouteHopUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * The data needed to update a TracerouteHop.
   */
  data: Prisma.XOR<Prisma.TracerouteHopUpdateInput, Prisma.TracerouteHopUncheckedUpdateInput>
  /**
   * Choose, which TracerouteHop to update.
   */
  where: Prisma.TracerouteHopWhereUniqueInput
}

/**
 * TracerouteHop updateMany
 */
export type TracerouteHopUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TracerouteHops.
   */
  data: Prisma.XOR<Prisma.TracerouteHopUpdateManyMutationInput, Prisma.TracerouteHopUncheckedUpdateManyInput>
  /**
   * Filter which TracerouteHops to update
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * Limit how many TracerouteHops to update.
   */
  limit?: number
}

/**
 * TracerouteHop updateManyAndReturn
 */
export type TracerouteHopUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * The data used to update TracerouteHops.
   */
  data: Prisma.XOR<Prisma.TracerouteHopUpdateManyMutationInput, Prisma.TracerouteHopUncheckedUpdateManyInput>
  /**
   * Filter which TracerouteHops to update
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * Limit how many TracerouteHops to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TracerouteHop upsert
 */
export type TracerouteHopUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * The filter to search for the TracerouteHop to update in case it exists.
   */
  where: Prisma.TracerouteHopWhereUniqueInput
  /**
   * In case the TracerouteHop found by the `where` argument doesn't exist, create a new TracerouteHop with this data.
   */
  create: Prisma.XOR<Prisma.TracerouteHopCreateInput, Prisma.TracerouteHopUncheckedCreateInput>
  /**
   * In case the TracerouteHop was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TracerouteHopUpdateInput, Prisma.TracerouteHopUncheckedUpdateInput>
}

/**
 * TracerouteHop delete
 */
export type TracerouteHopDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  /**
   * Filter which TracerouteHop to delete.
   */
  where: Prisma.TracerouteHopWhereUniqueInput
}

/**
 * TracerouteHop deleteMany
 */
export type TracerouteHopDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TracerouteHops to delete
   */
  where?: Prisma.TracerouteHopWhereInput
  /**
   * Limit how many TracerouteHops to delete.
   */
  limit?: number
}

/**
 * TracerouteHop without action
 */
export type TracerouteHopDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
}
