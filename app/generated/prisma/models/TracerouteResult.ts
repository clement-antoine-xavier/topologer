
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TracerouteResult` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TracerouteResult
 * 
 */
export type TracerouteResultModel = runtime.Types.Result.DefaultSelection<Prisma.$TracerouteResultPayload>

export type AggregateTracerouteResult = {
  _count: TracerouteResultCountAggregateOutputType | null
  _min: TracerouteResultMinAggregateOutputType | null
  _max: TracerouteResultMaxAggregateOutputType | null
}

export type TracerouteResultMinAggregateOutputType = {
  id: string | null
  target: string | null
  targetType: string | null
  success: boolean | null
  error: string | null
  createdAt: Date | null
}

export type TracerouteResultMaxAggregateOutputType = {
  id: string | null
  target: string | null
  targetType: string | null
  success: boolean | null
  error: string | null
  createdAt: Date | null
}

export type TracerouteResultCountAggregateOutputType = {
  id: number
  target: number
  targetType: number
  success: number
  error: number
  createdAt: number
  _all: number
}


export type TracerouteResultMinAggregateInputType = {
  id?: true
  target?: true
  targetType?: true
  success?: true
  error?: true
  createdAt?: true
}

export type TracerouteResultMaxAggregateInputType = {
  id?: true
  target?: true
  targetType?: true
  success?: true
  error?: true
  createdAt?: true
}

export type TracerouteResultCountAggregateInputType = {
  id?: true
  target?: true
  targetType?: true
  success?: true
  error?: true
  createdAt?: true
  _all?: true
}

export type TracerouteResultAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TracerouteResult to aggregate.
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteResults to fetch.
   */
  orderBy?: Prisma.TracerouteResultOrderByWithRelationInput | Prisma.TracerouteResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TracerouteResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TracerouteResults
  **/
  _count?: true | TracerouteResultCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TracerouteResultMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TracerouteResultMaxAggregateInputType
}

export type GetTracerouteResultAggregateType<T extends TracerouteResultAggregateArgs> = {
      [P in keyof T & keyof AggregateTracerouteResult]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTracerouteResult[P]>
    : Prisma.GetScalarType<T[P], AggregateTracerouteResult[P]>
}




export type TracerouteResultGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TracerouteResultWhereInput
  orderBy?: Prisma.TracerouteResultOrderByWithAggregationInput | Prisma.TracerouteResultOrderByWithAggregationInput[]
  by: Prisma.TracerouteResultScalarFieldEnum[] | Prisma.TracerouteResultScalarFieldEnum
  having?: Prisma.TracerouteResultScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TracerouteResultCountAggregateInputType | true
  _min?: TracerouteResultMinAggregateInputType
  _max?: TracerouteResultMaxAggregateInputType
}

export type TracerouteResultGroupByOutputType = {
  id: string
  target: string
  targetType: string
  success: boolean
  error: string | null
  createdAt: Date
  _count: TracerouteResultCountAggregateOutputType | null
  _min: TracerouteResultMinAggregateOutputType | null
  _max: TracerouteResultMaxAggregateOutputType | null
}

type GetTracerouteResultGroupByPayload<T extends TracerouteResultGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TracerouteResultGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TracerouteResultGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TracerouteResultGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TracerouteResultGroupByOutputType[P]>
      }
    >
  >



export type TracerouteResultWhereInput = {
  AND?: Prisma.TracerouteResultWhereInput | Prisma.TracerouteResultWhereInput[]
  OR?: Prisma.TracerouteResultWhereInput[]
  NOT?: Prisma.TracerouteResultWhereInput | Prisma.TracerouteResultWhereInput[]
  id?: Prisma.StringFilter<"TracerouteResult"> | string
  target?: Prisma.StringFilter<"TracerouteResult"> | string
  targetType?: Prisma.StringFilter<"TracerouteResult"> | string
  success?: Prisma.BoolFilter<"TracerouteResult"> | boolean
  error?: Prisma.StringNullableFilter<"TracerouteResult"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TracerouteResult"> | Date | string
  hops?: Prisma.TracerouteHopListRelationFilter
}

export type TracerouteResultOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  target?: Prisma.SortOrder
  targetType?: Prisma.SortOrder
  success?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  hops?: Prisma.TracerouteHopOrderByRelationAggregateInput
}

export type TracerouteResultWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TracerouteResultWhereInput | Prisma.TracerouteResultWhereInput[]
  OR?: Prisma.TracerouteResultWhereInput[]
  NOT?: Prisma.TracerouteResultWhereInput | Prisma.TracerouteResultWhereInput[]
  target?: Prisma.StringFilter<"TracerouteResult"> | string
  targetType?: Prisma.StringFilter<"TracerouteResult"> | string
  success?: Prisma.BoolFilter<"TracerouteResult"> | boolean
  error?: Prisma.StringNullableFilter<"TracerouteResult"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TracerouteResult"> | Date | string
  hops?: Prisma.TracerouteHopListRelationFilter
}, "id">

export type TracerouteResultOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  target?: Prisma.SortOrder
  targetType?: Prisma.SortOrder
  success?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TracerouteResultCountOrderByAggregateInput
  _max?: Prisma.TracerouteResultMaxOrderByAggregateInput
  _min?: Prisma.TracerouteResultMinOrderByAggregateInput
}

export type TracerouteResultScalarWhereWithAggregatesInput = {
  AND?: Prisma.TracerouteResultScalarWhereWithAggregatesInput | Prisma.TracerouteResultScalarWhereWithAggregatesInput[]
  OR?: Prisma.TracerouteResultScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TracerouteResultScalarWhereWithAggregatesInput | Prisma.TracerouteResultScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TracerouteResult"> | string
  target?: Prisma.StringWithAggregatesFilter<"TracerouteResult"> | string
  targetType?: Prisma.StringWithAggregatesFilter<"TracerouteResult"> | string
  success?: Prisma.BoolWithAggregatesFilter<"TracerouteResult"> | boolean
  error?: Prisma.StringNullableWithAggregatesFilter<"TracerouteResult"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TracerouteResult"> | Date | string
}

export type TracerouteResultCreateInput = {
  id?: string
  target: string
  targetType: string
  success: boolean
  error?: string | null
  createdAt?: Date | string
  hops?: Prisma.TracerouteHopCreateNestedManyWithoutResultInput
}

export type TracerouteResultUncheckedCreateInput = {
  id?: string
  target: string
  targetType: string
  success: boolean
  error?: string | null
  createdAt?: Date | string
  hops?: Prisma.TracerouteHopUncheckedCreateNestedManyWithoutResultInput
}

export type TracerouteResultUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hops?: Prisma.TracerouteHopUpdateManyWithoutResultNestedInput
}

export type TracerouteResultUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hops?: Prisma.TracerouteHopUncheckedUpdateManyWithoutResultNestedInput
}

export type TracerouteResultCreateManyInput = {
  id?: string
  target: string
  targetType: string
  success: boolean
  error?: string | null
  createdAt?: Date | string
}

export type TracerouteResultUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TracerouteResultUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TracerouteResultCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  target?: Prisma.SortOrder
  targetType?: Prisma.SortOrder
  success?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TracerouteResultMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  target?: Prisma.SortOrder
  targetType?: Prisma.SortOrder
  success?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TracerouteResultMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  target?: Prisma.SortOrder
  targetType?: Prisma.SortOrder
  success?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TracerouteResultScalarRelationFilter = {
  is?: Prisma.TracerouteResultWhereInput
  isNot?: Prisma.TracerouteResultWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TracerouteResultCreateNestedOneWithoutHopsInput = {
  create?: Prisma.XOR<Prisma.TracerouteResultCreateWithoutHopsInput, Prisma.TracerouteResultUncheckedCreateWithoutHopsInput>
  connectOrCreate?: Prisma.TracerouteResultCreateOrConnectWithoutHopsInput
  connect?: Prisma.TracerouteResultWhereUniqueInput
}

export type TracerouteResultUpdateOneRequiredWithoutHopsNestedInput = {
  create?: Prisma.XOR<Prisma.TracerouteResultCreateWithoutHopsInput, Prisma.TracerouteResultUncheckedCreateWithoutHopsInput>
  connectOrCreate?: Prisma.TracerouteResultCreateOrConnectWithoutHopsInput
  upsert?: Prisma.TracerouteResultUpsertWithoutHopsInput
  connect?: Prisma.TracerouteResultWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TracerouteResultUpdateToOneWithWhereWithoutHopsInput, Prisma.TracerouteResultUpdateWithoutHopsInput>, Prisma.TracerouteResultUncheckedUpdateWithoutHopsInput>
}

export type TracerouteResultCreateWithoutHopsInput = {
  id?: string
  target: string
  targetType: string
  success: boolean
  error?: string | null
  createdAt?: Date | string
}

export type TracerouteResultUncheckedCreateWithoutHopsInput = {
  id?: string
  target: string
  targetType: string
  success: boolean
  error?: string | null
  createdAt?: Date | string
}

export type TracerouteResultCreateOrConnectWithoutHopsInput = {
  where: Prisma.TracerouteResultWhereUniqueInput
  create: Prisma.XOR<Prisma.TracerouteResultCreateWithoutHopsInput, Prisma.TracerouteResultUncheckedCreateWithoutHopsInput>
}

export type TracerouteResultUpsertWithoutHopsInput = {
  update: Prisma.XOR<Prisma.TracerouteResultUpdateWithoutHopsInput, Prisma.TracerouteResultUncheckedUpdateWithoutHopsInput>
  create: Prisma.XOR<Prisma.TracerouteResultCreateWithoutHopsInput, Prisma.TracerouteResultUncheckedCreateWithoutHopsInput>
  where?: Prisma.TracerouteResultWhereInput
}

export type TracerouteResultUpdateToOneWithWhereWithoutHopsInput = {
  where?: Prisma.TracerouteResultWhereInput
  data: Prisma.XOR<Prisma.TracerouteResultUpdateWithoutHopsInput, Prisma.TracerouteResultUncheckedUpdateWithoutHopsInput>
}

export type TracerouteResultUpdateWithoutHopsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TracerouteResultUncheckedUpdateWithoutHopsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  target?: Prisma.StringFieldUpdateOperationsInput | string
  targetType?: Prisma.StringFieldUpdateOperationsInput | string
  success?: Prisma.BoolFieldUpdateOperationsInput | boolean
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TracerouteResultCountOutputType
 */

export type TracerouteResultCountOutputType = {
  hops: number
}

export type TracerouteResultCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  hops?: boolean | TracerouteResultCountOutputTypeCountHopsArgs
}

/**
 * TracerouteResultCountOutputType without action
 */
export type TracerouteResultCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResultCountOutputType
   */
  select?: Prisma.TracerouteResultCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TracerouteResultCountOutputType without action
 */
export type TracerouteResultCountOutputTypeCountHopsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TracerouteHopWhereInput
}


export type TracerouteResultSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  target?: boolean
  targetType?: boolean
  success?: boolean
  error?: boolean
  createdAt?: boolean
  hops?: boolean | Prisma.TracerouteResult$hopsArgs<ExtArgs>
  _count?: boolean | Prisma.TracerouteResultCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tracerouteResult"]>

export type TracerouteResultSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  target?: boolean
  targetType?: boolean
  success?: boolean
  error?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["tracerouteResult"]>

export type TracerouteResultSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  target?: boolean
  targetType?: boolean
  success?: boolean
  error?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["tracerouteResult"]>

export type TracerouteResultSelectScalar = {
  id?: boolean
  target?: boolean
  targetType?: boolean
  success?: boolean
  error?: boolean
  createdAt?: boolean
}

export type TracerouteResultOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "target" | "targetType" | "success" | "error" | "createdAt", ExtArgs["result"]["tracerouteResult"]>
export type TracerouteResultInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  hops?: boolean | Prisma.TracerouteResult$hopsArgs<ExtArgs>
  _count?: boolean | Prisma.TracerouteResultCountOutputTypeDefaultArgs<ExtArgs>
}
export type TracerouteResultIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TracerouteResultIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TracerouteResultPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TracerouteResult"
  objects: {
    hops: Prisma.$TracerouteHopPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    target: string
    targetType: string
    success: boolean
    error: string | null
    createdAt: Date
  }, ExtArgs["result"]["tracerouteResult"]>
  composites: {}
}

export type TracerouteResultGetPayload<S extends boolean | null | undefined | TracerouteResultDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload, S>

export type TracerouteResultCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TracerouteResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TracerouteResultCountAggregateInputType | true
  }

export interface TracerouteResultDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TracerouteResult'], meta: { name: 'TracerouteResult' } }
  /**
   * Find zero or one TracerouteResult that matches the filter.
   * @param {TracerouteResultFindUniqueArgs} args - Arguments to find a TracerouteResult
   * @example
   * // Get one TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TracerouteResultFindUniqueArgs>(args: Prisma.SelectSubset<T, TracerouteResultFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TracerouteResult that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TracerouteResultFindUniqueOrThrowArgs} args - Arguments to find a TracerouteResult
   * @example
   * // Get one TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TracerouteResultFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TracerouteResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TracerouteResult that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultFindFirstArgs} args - Arguments to find a TracerouteResult
   * @example
   * // Get one TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TracerouteResultFindFirstArgs>(args?: Prisma.SelectSubset<T, TracerouteResultFindFirstArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TracerouteResult that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultFindFirstOrThrowArgs} args - Arguments to find a TracerouteResult
   * @example
   * // Get one TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TracerouteResultFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TracerouteResultFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TracerouteResults that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TracerouteResults
   * const tracerouteResults = await prisma.tracerouteResult.findMany()
   * 
   * // Get first 10 TracerouteResults
   * const tracerouteResults = await prisma.tracerouteResult.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tracerouteResultWithIdOnly = await prisma.tracerouteResult.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TracerouteResultFindManyArgs>(args?: Prisma.SelectSubset<T, TracerouteResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TracerouteResult.
   * @param {TracerouteResultCreateArgs} args - Arguments to create a TracerouteResult.
   * @example
   * // Create one TracerouteResult
   * const TracerouteResult = await prisma.tracerouteResult.create({
   *   data: {
   *     // ... data to create a TracerouteResult
   *   }
   * })
   * 
   */
  create<T extends TracerouteResultCreateArgs>(args: Prisma.SelectSubset<T, TracerouteResultCreateArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TracerouteResults.
   * @param {TracerouteResultCreateManyArgs} args - Arguments to create many TracerouteResults.
   * @example
   * // Create many TracerouteResults
   * const tracerouteResult = await prisma.tracerouteResult.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TracerouteResultCreateManyArgs>(args?: Prisma.SelectSubset<T, TracerouteResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TracerouteResults and returns the data saved in the database.
   * @param {TracerouteResultCreateManyAndReturnArgs} args - Arguments to create many TracerouteResults.
   * @example
   * // Create many TracerouteResults
   * const tracerouteResult = await prisma.tracerouteResult.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TracerouteResults and only return the `id`
   * const tracerouteResultWithIdOnly = await prisma.tracerouteResult.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TracerouteResultCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TracerouteResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TracerouteResult.
   * @param {TracerouteResultDeleteArgs} args - Arguments to delete one TracerouteResult.
   * @example
   * // Delete one TracerouteResult
   * const TracerouteResult = await prisma.tracerouteResult.delete({
   *   where: {
   *     // ... filter to delete one TracerouteResult
   *   }
   * })
   * 
   */
  delete<T extends TracerouteResultDeleteArgs>(args: Prisma.SelectSubset<T, TracerouteResultDeleteArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TracerouteResult.
   * @param {TracerouteResultUpdateArgs} args - Arguments to update one TracerouteResult.
   * @example
   * // Update one TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TracerouteResultUpdateArgs>(args: Prisma.SelectSubset<T, TracerouteResultUpdateArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TracerouteResults.
   * @param {TracerouteResultDeleteManyArgs} args - Arguments to filter TracerouteResults to delete.
   * @example
   * // Delete a few TracerouteResults
   * const { count } = await prisma.tracerouteResult.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TracerouteResultDeleteManyArgs>(args?: Prisma.SelectSubset<T, TracerouteResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TracerouteResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TracerouteResults
   * const tracerouteResult = await prisma.tracerouteResult.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TracerouteResultUpdateManyArgs>(args: Prisma.SelectSubset<T, TracerouteResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TracerouteResults and returns the data updated in the database.
   * @param {TracerouteResultUpdateManyAndReturnArgs} args - Arguments to update many TracerouteResults.
   * @example
   * // Update many TracerouteResults
   * const tracerouteResult = await prisma.tracerouteResult.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TracerouteResults and only return the `id`
   * const tracerouteResultWithIdOnly = await prisma.tracerouteResult.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TracerouteResultUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TracerouteResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TracerouteResult.
   * @param {TracerouteResultUpsertArgs} args - Arguments to update or create a TracerouteResult.
   * @example
   * // Update or create a TracerouteResult
   * const tracerouteResult = await prisma.tracerouteResult.upsert({
   *   create: {
   *     // ... data to create a TracerouteResult
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TracerouteResult we want to update
   *   }
   * })
   */
  upsert<T extends TracerouteResultUpsertArgs>(args: Prisma.SelectSubset<T, TracerouteResultUpsertArgs<ExtArgs>>): Prisma.Prisma__TracerouteResultClient<runtime.Types.Result.GetResult<Prisma.$TracerouteResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TracerouteResults.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultCountArgs} args - Arguments to filter TracerouteResults to count.
   * @example
   * // Count the number of TracerouteResults
   * const count = await prisma.tracerouteResult.count({
   *   where: {
   *     // ... the filter for the TracerouteResults we want to count
   *   }
   * })
  **/
  count<T extends TracerouteResultCountArgs>(
    args?: Prisma.Subset<T, TracerouteResultCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TracerouteResultCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TracerouteResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TracerouteResultAggregateArgs>(args: Prisma.Subset<T, TracerouteResultAggregateArgs>): Prisma.PrismaPromise<GetTracerouteResultAggregateType<T>>

  /**
   * Group by TracerouteResult.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TracerouteResultGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TracerouteResultGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TracerouteResultGroupByArgs['orderBy'] }
      : { orderBy?: TracerouteResultGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TracerouteResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTracerouteResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TracerouteResult model
 */
readonly fields: TracerouteResultFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TracerouteResult.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TracerouteResultClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  hops<T extends Prisma.TracerouteResult$hopsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TracerouteResult$hopsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TracerouteHopPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TracerouteResult model
 */
export interface TracerouteResultFieldRefs {
  readonly id: Prisma.FieldRef<"TracerouteResult", 'String'>
  readonly target: Prisma.FieldRef<"TracerouteResult", 'String'>
  readonly targetType: Prisma.FieldRef<"TracerouteResult", 'String'>
  readonly success: Prisma.FieldRef<"TracerouteResult", 'Boolean'>
  readonly error: Prisma.FieldRef<"TracerouteResult", 'String'>
  readonly createdAt: Prisma.FieldRef<"TracerouteResult", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TracerouteResult findUnique
 */
export type TracerouteResultFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteResult to fetch.
   */
  where: Prisma.TracerouteResultWhereUniqueInput
}

/**
 * TracerouteResult findUniqueOrThrow
 */
export type TracerouteResultFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteResult to fetch.
   */
  where: Prisma.TracerouteResultWhereUniqueInput
}

/**
 * TracerouteResult findFirst
 */
export type TracerouteResultFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteResult to fetch.
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteResults to fetch.
   */
  orderBy?: Prisma.TracerouteResultOrderByWithRelationInput | Prisma.TracerouteResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TracerouteResults.
   */
  cursor?: Prisma.TracerouteResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TracerouteResults.
   */
  distinct?: Prisma.TracerouteResultScalarFieldEnum | Prisma.TracerouteResultScalarFieldEnum[]
}

/**
 * TracerouteResult findFirstOrThrow
 */
export type TracerouteResultFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteResult to fetch.
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteResults to fetch.
   */
  orderBy?: Prisma.TracerouteResultOrderByWithRelationInput | Prisma.TracerouteResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TracerouteResults.
   */
  cursor?: Prisma.TracerouteResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteResults.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TracerouteResults.
   */
  distinct?: Prisma.TracerouteResultScalarFieldEnum | Prisma.TracerouteResultScalarFieldEnum[]
}

/**
 * TracerouteResult findMany
 */
export type TracerouteResultFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter, which TracerouteResults to fetch.
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TracerouteResults to fetch.
   */
  orderBy?: Prisma.TracerouteResultOrderByWithRelationInput | Prisma.TracerouteResultOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TracerouteResults.
   */
  cursor?: Prisma.TracerouteResultWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TracerouteResults from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TracerouteResults.
   */
  skip?: number
  distinct?: Prisma.TracerouteResultScalarFieldEnum | Prisma.TracerouteResultScalarFieldEnum[]
}

/**
 * TracerouteResult create
 */
export type TracerouteResultCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * The data needed to create a TracerouteResult.
   */
  data: Prisma.XOR<Prisma.TracerouteResultCreateInput, Prisma.TracerouteResultUncheckedCreateInput>
}

/**
 * TracerouteResult createMany
 */
export type TracerouteResultCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TracerouteResults.
   */
  data: Prisma.TracerouteResultCreateManyInput | Prisma.TracerouteResultCreateManyInput[]
}

/**
 * TracerouteResult createManyAndReturn
 */
export type TracerouteResultCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * The data used to create many TracerouteResults.
   */
  data: Prisma.TracerouteResultCreateManyInput | Prisma.TracerouteResultCreateManyInput[]
}

/**
 * TracerouteResult update
 */
export type TracerouteResultUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * The data needed to update a TracerouteResult.
   */
  data: Prisma.XOR<Prisma.TracerouteResultUpdateInput, Prisma.TracerouteResultUncheckedUpdateInput>
  /**
   * Choose, which TracerouteResult to update.
   */
  where: Prisma.TracerouteResultWhereUniqueInput
}

/**
 * TracerouteResult updateMany
 */
export type TracerouteResultUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TracerouteResults.
   */
  data: Prisma.XOR<Prisma.TracerouteResultUpdateManyMutationInput, Prisma.TracerouteResultUncheckedUpdateManyInput>
  /**
   * Filter which TracerouteResults to update
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * Limit how many TracerouteResults to update.
   */
  limit?: number
}

/**
 * TracerouteResult updateManyAndReturn
 */
export type TracerouteResultUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * The data used to update TracerouteResults.
   */
  data: Prisma.XOR<Prisma.TracerouteResultUpdateManyMutationInput, Prisma.TracerouteResultUncheckedUpdateManyInput>
  /**
   * Filter which TracerouteResults to update
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * Limit how many TracerouteResults to update.
   */
  limit?: number
}

/**
 * TracerouteResult upsert
 */
export type TracerouteResultUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * The filter to search for the TracerouteResult to update in case it exists.
   */
  where: Prisma.TracerouteResultWhereUniqueInput
  /**
   * In case the TracerouteResult found by the `where` argument doesn't exist, create a new TracerouteResult with this data.
   */
  create: Prisma.XOR<Prisma.TracerouteResultCreateInput, Prisma.TracerouteResultUncheckedCreateInput>
  /**
   * In case the TracerouteResult was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TracerouteResultUpdateInput, Prisma.TracerouteResultUncheckedUpdateInput>
}

/**
 * TracerouteResult delete
 */
export type TracerouteResultDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
  /**
   * Filter which TracerouteResult to delete.
   */
  where: Prisma.TracerouteResultWhereUniqueInput
}

/**
 * TracerouteResult deleteMany
 */
export type TracerouteResultDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TracerouteResults to delete
   */
  where?: Prisma.TracerouteResultWhereInput
  /**
   * Limit how many TracerouteResults to delete.
   */
  limit?: number
}

/**
 * TracerouteResult.hops
 */
export type TracerouteResult$hopsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteHop
   */
  select?: Prisma.TracerouteHopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteHop
   */
  omit?: Prisma.TracerouteHopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteHopInclude<ExtArgs> | null
  where?: Prisma.TracerouteHopWhereInput
  orderBy?: Prisma.TracerouteHopOrderByWithRelationInput | Prisma.TracerouteHopOrderByWithRelationInput[]
  cursor?: Prisma.TracerouteHopWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TracerouteHopScalarFieldEnum | Prisma.TracerouteHopScalarFieldEnum[]
}

/**
 * TracerouteResult without action
 */
export type TracerouteResultDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TracerouteResult
   */
  select?: Prisma.TracerouteResultSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TracerouteResult
   */
  omit?: Prisma.TracerouteResultOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TracerouteResultInclude<ExtArgs> | null
}
